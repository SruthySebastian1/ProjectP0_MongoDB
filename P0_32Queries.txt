PROJECT P0 : QUERIES
(20-07-2021)


1.	Write a MongoDB query to display all the documents in the collection restaurants.
a.	db.restcoll.find().pretty()
b.	for x in restcoll.find({}): 
 print(x)

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
a. db.restcoll.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
b. for x in restcoll.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}):
    print(x)

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
a. db.restcoll.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0})
b. for x in restcoll.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0}):
    print(x)

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
a. db.restcoll.find({},{"restaurant_id":1,"name":1,"borough":1,"address.zipcode":1,"_id":0})
b. for x in restcoll.find({},{"restaurant_id":1,"name":1,"borough":1,"address.zipcode":1,"_id":0}):
    print(x)

5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
a. db.restcoll.find({"borough":"Bronx"})
b. for x in restcoll.find({"borough":"Bronx"}):
     print(x)

6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
a. db.restcoll.find({borough:'Bronx'}).limit(5).pretty()
b. for x in restcoll.find({"borough":'Bronx'}).limit(5):
     pprint.pprint(x)

7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
a. db.restcoll.find({borough:'Bronx'}).skip(5).limit(5)
b. for x in restcoll.find({"borough":'Bronx'}).skip(5).limit(5):
     pprint.pprint(x)

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
a. db.restcoll.find({'grades.score': {$gt: 90}}).pretty()
b. for x in restcoll.find({'grades.score': {'$gt': 90}}):
     pprint.pprint(x)


 9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
a.	db.restcoll.find({'grades':{$elemMatch:{"score":{$gt:80,$lt:100}}}}).pretty()
b.	for x in restcoll.find({'grades':{'$elemMatch':{"score":{'$gt':80,'$lt':100}}}}):
      pprint.pprint(x)

10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
a. db.restcoll.find({'address.coord.1': {$lt: -95.754168}})
b. for x in restcoll.find({‘address.coord.1’: {‘$lt’: -95.754168}}):
     pprint.pprint(x)

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of ‘American’ and their grade score more than 70 and latitude less than -65.754168.
a. db.restcoll.find({$and:[{"cuisine":{$ne :"American "}},{"grades.score":{$gt : 70}},{"address.coord.1": {$lt:-65.754168}}]})
b. for x in restcoll.find({'$and':[{"cuisine":{'$ne' :"American "}},{"grades.score":{'$gt' :    70}},{"address.coord.1": {'$lt':-65.754168}}]}):
      pprint.pprint(x)

12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
a. db.restcoll.find({$and : [{"cuisine" : {$ne : "American "}}, {"address.coord.0" : {$lt : -65.754168}}, {"grades.score" : {$gt : 70}}]})
b. for x in restcoll.find({"cuisine" : {'$ne' : "American "},"grades.score" :{'$gt': 70},"address.coord.0" : {'$lt' : -65.754168}}):
      pprint.pprint(x)

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
a. db.restcoll.find({$and:[{"cuisine":{$ne :"American "}},{"grades.grade":'A'}, {"borough": "Brooklyn"}]}).sort({"cuisine":-1})
b. from pymongo import MongoClient, ASCENDING, DESCENDING
 for x in restcoll.find({'$and':[{"cuisine":{'$ne' :"American "}},{"grades.grade":'A'}, {"borough": "Brooklyn"}]}).sort([('cuisine',DESCENDING)]):
    print(x)

14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
a. db.restcoll.find({name:/^Wil/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
b. for x in restcoll.find({'name':{"$regex":'^Wil.*'}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}):
     pprint.pprint(x)

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
a. db.restcoll.find({name:/ces$/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
b. for x in restcoll.find({'name':{"$regex":'ces$'}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}):
     print(x)

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
a. db.restcoll.find({name:/.*Reg.*/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
b. for x in restcoll.find({'name':{"$regex":'.*Reg.*'}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}):
     print(x)

17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
a. db.restcoll.find({$and:[{borough:'Bronx'},{$or:[{'cuisine':'American '},{'cuisine':'Chinese'}]}]})
b. for x in restcoll.find({'$and':[{'borough':'Bronx'},{'$or':[{'cuisine':'American '},{'cuisine':'Chinese'}]}]}):
    print(x)

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
a. db.restcoll.find( {"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1})
b. for x in restcoll.find( {"borough" :{'$in' :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1}):
    print(x)

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
a. db.restcoll.find( {"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } )
b. for x in restcoll.find( {"borough" :{'$nin' :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ):
    print(x)

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
a. db.restcoll.find( {"grades.score" : { $not: {$gt : 10} } }, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } )
b. for x in restcoll.find( {"grades.score" : {'$not': {'$gt' : 10} } }, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ):
    print(x)

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.
a. db.restcoll.find( {$or: [  {name: /^Wil/},  {"$and": [  {"cuisine" : {$ne :"American "}},  {"cuisine" : {$ne :"Chinees"}}  ]} ]} ,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1} )
b. for x in restcoll.find( {'$or': [  {'name': {'$regex': '^Wil.*'}},  {"$and": [  {"cuisine" : {'$ne' :"American "}},  {"cuisine" : {'$ne' :"Chinees"}}  ]} ]} ,{"restaurant_id" : 1, "name" : 1,"borough":1,"cuisine" :1} ):
     print(x)

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..
a. db.restcoll.find({"grades" : {$elemMatch: {"date": ISODate("2014-08-11T00:00:00Z"), "grade":"A", "score":11}}}, {_id:0, restaurant_id:1, name:1, grades:1}).pretty()



 
for x in restcoll.find({"grades" : {'$elemMatch': {"date":datetime.fromisoformat("2014-08-11T00:00:00"), "grade":"A", "score":11}}}, {'_id':False, "restaurant_id":1, "name":1, "grades":1}):
  pprint.pprint(x)

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".
a. db.restcoll.find( { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), "grades.1.grade":"A" , "grades.1.score" : 9 }, {"restaurant_id" : 1,"name":1,"grades":1} ).pretty()
b. from datetime import datetime
for x in restcoll.find( { "grades.1.date": datetime.fromisoformat("2014-08-11T00:00:00"), "grades.1.grade":"A" , "grades.1.score" : 9 }, {"restaurant_id" : 1,"name":1,"grades":1}):
     pprint.pprint(x)

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.
a. db.restcoll.find( { "address.coord.1": {$gt : 42, $lte : 52} }, {"restaurant_id" : 1,"name":1,"address":1,"coord":1} ).pretty()
b. for x in restcoll.find( { "address.coord.1": {'$gt' : 42, '$lte' : 52} }, {"_id":False,"restaurant_id" : True,"name":True,"address":True,"coord":True} ):
     print(x)

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
a. db.restcoll.find().sort({"name":1})
b. for x in restcoll.find().sort([("name",ASCENDING)]):
      print(x)

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.
a. db.restcoll.find().sort({"name":-1})
b. for x in restcoll.find().sort([("name",DESCENDING)]):
   print(x)

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
a. db.restcoll.find().sort({"cuisine":1,"borough":-1})
b. for x in restcoll.find({},{"cuisine":True,"borough":True,"_id":0}).sort([("cuisine",ASCENDING),("borough",DESCENDING)]):
     print(x)

28. Write a MongoDB query to know whether all the addresses contains the street or not.
a.db.restcoll.find({"address.street": { $exists : true }})
b.for x in restcoll.find({"address.street": { '$exists' :True}}):
     print(x)

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
a. db.restcoll.find({"address.coord" :{$type:"double"}})
b.for x in restcoll.find({"address.coord" :{'$type' : “double”}}):
     print(x)

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
a. db.restcoll.find({"grades.score": {$mod: [7,0]}},{"restaurant_id":1, "name":1,"grades":1}).pretty()
b.for x in restcoll.find({"grades": {'$elemMatch': {"score": {'$mod': [7,0]}}}},{'_id':0, 'grades.score':1}):
     print(x)

31. Write a MongoDB query to find the restaurant name, borough, longitude and lattitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.
a.db.restcoll.find({name: {$regex: /mon/}},{_id:0, name:1, borough:1, "address.coord":1, cuisine:1})
b.for x in restcoll.find({'name': {'$regex': '.*mon.*'}},{'_id':0, 'name':1, 'borough':1, "address.coord":1, 'cuisine':1}):
     print(x)
   
32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
a.db.restcoll.find({name: {$regex: /^Mad.*/}},{_id:0, name:1, borough:1, "address.coord":1, cuisine:1})
b.for x in restcoll.find({'name': {'$regex': '^Mad.*'}},{'_id':0, 'name':1, 'borough':1, 'address.coord':1, 'cuisine':1}):
   print(x)})
 


